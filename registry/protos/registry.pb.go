//
//Requires (see the Registry dockerfile for build hints):
//- $ go get github.com/golang/protobuf/protoc-gen-go
//- $ go get github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway
//- Install protoc (and includes)
//From the kafka-kit repo root:
//- $ protoc -I registry -I $GOPATH/pkg/mod/$(awk '/grpc-gateway/ {printf "%s@%s", $1, $2}' go.mod)/third_party/googleapis protos/registry.proto --go_out=plugins=grpc:$GOPATH/src --grpc-gateway_out=logtostderr=true:$GOPATH/src

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: protos/registry.proto

package protos

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TagResponse) Reset() {
	*x = TagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResponse) ProtoMessage() {}

func (x *TagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResponse.ProtoReflect.Descriptor instead.
func (*TagResponse) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{0}
}

func (x *TagResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BrokerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Id  uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BrokerRequest) Reset() {
	*x = BrokerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerRequest) ProtoMessage() {}

func (x *BrokerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerRequest.ProtoReflect.Descriptor instead.
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{1}
}

func (x *BrokerRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *BrokerRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BrokerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Brokers map[uint32]*Broker `protobuf:"bytes,5,rep,name=brokers,proto3" json:"brokers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ids     []uint32           `protobuf:"varint,6,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *BrokerResponse) Reset() {
	*x = BrokerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BrokerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BrokerResponse) ProtoMessage() {}

func (x *BrokerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BrokerResponse.ProtoReflect.Descriptor instead.
func (*BrokerResponse) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{2}
}

func (x *BrokerResponse) GetBrokers() map[uint32]*Broker {
	if x != nil {
		return x.Brokers
	}
	return nil
}

func (x *BrokerResponse) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type UnmappedBrokersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exclude []string `protobuf:"bytes,1,rep,name=exclude,proto3" json:"exclude,omitempty"`
}

func (x *UnmappedBrokersRequest) Reset() {
	*x = UnmappedBrokersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmappedBrokersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmappedBrokersRequest) ProtoMessage() {}

func (x *UnmappedBrokersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmappedBrokersRequest.ProtoReflect.Descriptor instead.
func (*UnmappedBrokersRequest) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{3}
}

func (x *UnmappedBrokersRequest) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

type Broker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Broker metadata from ZooKeeper.
	Id                          uint32            `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Listenersecurityprotocolmap map[string]string `protobuf:"bytes,6,rep,name=listenersecurityprotocolmap,proto3" json:"listenersecurityprotocolmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Endpoints                   []string          `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Rack                        string            `protobuf:"bytes,8,opt,name=rack,proto3" json:"rack,omitempty"`
	Jmxport                     uint32            `protobuf:"varint,9,opt,name=jmxport,proto3" json:"jmxport,omitempty"`
	Host                        string            `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	Timestamp                   int64             `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Port                        uint32            `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Version                     uint32            `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Broker) Reset() {
	*x = Broker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Broker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Broker) ProtoMessage() {}

func (x *Broker) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Broker.ProtoReflect.Descriptor instead.
func (*Broker) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{4}
}

func (x *Broker) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Broker) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Broker) GetListenersecurityprotocolmap() map[string]string {
	if x != nil {
		return x.Listenersecurityprotocolmap
	}
	return nil
}

func (x *Broker) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Broker) GetRack() string {
	if x != nil {
		return x.Rack
	}
	return ""
}

func (x *Broker) GetJmxport() uint32 {
	if x != nil {
		return x.Jmxport
	}
	return 0
}

func (x *Broker) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Broker) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Broker) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Broker) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type TopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag  []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Name string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TopicRequest) Reset() {
	*x = TopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicRequest) ProtoMessage() {}

func (x *TopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicRequest.ProtoReflect.Descriptor instead.
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{5}
}

func (x *TopicRequest) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *TopicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic            *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TargetBrokerTags []string `protobuf:"bytes,2,rep,name=target_broker_tags,json=targetBrokerTags,proto3" json:"target_broker_tags,omitempty"`
}

func (x *CreateTopicRequest) Reset() {
	*x = CreateTopicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopicRequest) ProtoMessage() {}

func (x *CreateTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopicRequest.ProtoReflect.Descriptor instead.
func (*CreateTopicRequest) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTopicRequest) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *CreateTopicRequest) GetTargetBrokerTags() []string {
	if x != nil {
		return x.TargetBrokerTags
	}
	return nil
}

type TopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topics map[string]*Topic `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Names  []string          `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *TopicResponse) Reset() {
	*x = TopicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicResponse) ProtoMessage() {}

func (x *TopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicResponse.ProtoReflect.Descriptor instead.
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{7}
}

func (x *TopicResponse) GetTopics() map[string]*Topic {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *TopicResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Topic metadata from ZooKeeper.
	Name        string            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Partitions  uint32            `protobuf:"varint,6,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication uint32            `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
	Configs     map[string]string `protobuf:"bytes,8,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{8}
}

func (x *Topic) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetPartitions() uint32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *Topic) GetReplication() uint32 {
	if x != nil {
		return x.Replication
	}
	return 0
}

func (x *Topic) GetConfigs() map[string]string {
	if x != nil {
		return x.Configs
	}
	return nil
}

type OffsetMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpstreamOffset uint64 `protobuf:"varint,1,opt,name=upstream_offset,json=upstreamOffset,proto3" json:"upstream_offset,omitempty"`
	LocalOffset    uint64 `protobuf:"varint,2,opt,name=local_offset,json=localOffset,proto3" json:"local_offset,omitempty"`
}

func (x *OffsetMapping) Reset() {
	*x = OffsetMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OffsetMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OffsetMapping) ProtoMessage() {}

func (x *OffsetMapping) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OffsetMapping.ProtoReflect.Descriptor instead.
func (*OffsetMapping) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{9}
}

func (x *OffsetMapping) GetUpstreamOffset() uint64 {
	if x != nil {
		return x.UpstreamOffset
	}
	return 0
}

func (x *OffsetMapping) GetLocalOffset() uint64 {
	if x != nil {
		return x.LocalOffset
	}
	return 0
}

type TranslateOffsetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteClusterAlias string `protobuf:"bytes,1,opt,name=remote_cluster_alias,json=remoteClusterAlias,proto3" json:"remote_cluster_alias,omitempty"`
	GroupId            string `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *TranslateOffsetRequest) Reset() {
	*x = TranslateOffsetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateOffsetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateOffsetRequest) ProtoMessage() {}

func (x *TranslateOffsetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateOffsetRequest.ProtoReflect.Descriptor instead.
func (*TranslateOffsetRequest) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{10}
}

func (x *TranslateOffsetRequest) GetRemoteClusterAlias() string {
	if x != nil {
		return x.RemoteClusterAlias
	}
	return ""
}

func (x *TranslateOffsetRequest) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type TranslateOffsetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offsets map[string]*OffsetMapping `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TranslateOffsetResponse) Reset() {
	*x = TranslateOffsetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateOffsetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateOffsetResponse) ProtoMessage() {}

func (x *TranslateOffsetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateOffsetResponse.ProtoReflect.Descriptor instead.
func (*TranslateOffsetResponse) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{11}
}

func (x *TranslateOffsetResponse) GetOffsets() map[string]*OffsetMapping {
	if x != nil {
		return x.Offsets
	}
	return nil
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_registry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_registry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_registry_proto_rawDescGZIP(), []int{12}
}

var File_protos_registry_proto protoreflect.FileDescriptor

var file_protos_registry_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x27, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x31, 0x0a, 0x0d, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x0e,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x1a, 0x4c, 0x0a, 0x0c, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x32, 0x0a, 0x16, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x22, 0xf2, 0x03, 0x0a, 0x06, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x73,
	0x0a, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x6d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x6d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x6d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6d, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6a, 0x6d, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4e, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x69,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x4a,
	0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x05, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x0d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x70, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73,
	0x1a, 0x53, 0x0a, 0x0c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa7,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x5a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a,
	0x0f, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x73, 0x2f, 0x75, 0x6e, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c,
	0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x56, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x1c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x12, 0x51, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x16, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13,
	0x2a, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0x5d, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x65, 0x0a, 0x15, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x0f, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x0d, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x64, 0x0a, 0x0e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x58, 0x0a, 0x08, 0x54, 0x61, 0x67, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x5f, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x61,
	0x67, 0x73, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x59, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x17, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x17, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x2a, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x73, 0x2f, 0x74, 0x61, 0x67, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x20, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12,
	0x37, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x2d, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x7d, 0x2f, 0x7b, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x7d, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x44, 0x6f, 0x67, 0x2f, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_registry_proto_rawDescOnce sync.Once
	file_protos_registry_proto_rawDescData = file_protos_registry_proto_rawDesc
)

func file_protos_registry_proto_rawDescGZIP() []byte {
	file_protos_registry_proto_rawDescOnce.Do(func() {
		file_protos_registry_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_registry_proto_rawDescData)
	})
	return file_protos_registry_proto_rawDescData
}

var file_protos_registry_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_protos_registry_proto_goTypes = []interface{}{
	(*TagResponse)(nil),             // 0: registry.TagResponse
	(*BrokerRequest)(nil),           // 1: registry.BrokerRequest
	(*BrokerResponse)(nil),          // 2: registry.BrokerResponse
	(*UnmappedBrokersRequest)(nil),  // 3: registry.UnmappedBrokersRequest
	(*Broker)(nil),                  // 4: registry.Broker
	(*TopicRequest)(nil),            // 5: registry.TopicRequest
	(*CreateTopicRequest)(nil),      // 6: registry.CreateTopicRequest
	(*TopicResponse)(nil),           // 7: registry.TopicResponse
	(*Topic)(nil),                   // 8: registry.Topic
	(*OffsetMapping)(nil),           // 9: registry.OffsetMapping
	(*TranslateOffsetRequest)(nil),  // 10: registry.TranslateOffsetRequest
	(*TranslateOffsetResponse)(nil), // 11: registry.TranslateOffsetResponse
	(*Empty)(nil),                   // 12: registry.Empty
	nil,                             // 13: registry.BrokerResponse.BrokersEntry
	nil,                             // 14: registry.Broker.TagsEntry
	nil,                             // 15: registry.Broker.ListenersecurityprotocolmapEntry
	nil,                             // 16: registry.TopicResponse.TopicsEntry
	nil,                             // 17: registry.Topic.TagsEntry
	nil,                             // 18: registry.Topic.ConfigsEntry
	nil,                             // 19: registry.TranslateOffsetResponse.OffsetsEntry
}
var file_protos_registry_proto_depIdxs = []int32{
	13, // 0: registry.BrokerResponse.brokers:type_name -> registry.BrokerResponse.BrokersEntry
	14, // 1: registry.Broker.tags:type_name -> registry.Broker.TagsEntry
	15, // 2: registry.Broker.listenersecurityprotocolmap:type_name -> registry.Broker.ListenersecurityprotocolmapEntry
	8,  // 3: registry.CreateTopicRequest.topic:type_name -> registry.Topic
	16, // 4: registry.TopicResponse.topics:type_name -> registry.TopicResponse.TopicsEntry
	17, // 5: registry.Topic.tags:type_name -> registry.Topic.TagsEntry
	18, // 6: registry.Topic.configs:type_name -> registry.Topic.ConfigsEntry
	19, // 7: registry.TranslateOffsetResponse.offsets:type_name -> registry.TranslateOffsetResponse.OffsetsEntry
	4,  // 8: registry.BrokerResponse.BrokersEntry.value:type_name -> registry.Broker
	8,  // 9: registry.TopicResponse.TopicsEntry.value:type_name -> registry.Topic
	9,  // 10: registry.TranslateOffsetResponse.OffsetsEntry.value:type_name -> registry.OffsetMapping
	1,  // 11: registry.Registry.GetBrokers:input_type -> registry.BrokerRequest
	1,  // 12: registry.Registry.ListBrokers:input_type -> registry.BrokerRequest
	3,  // 13: registry.Registry.UnmappedBrokers:input_type -> registry.UnmappedBrokersRequest
	5,  // 14: registry.Registry.GetTopics:input_type -> registry.TopicRequest
	5,  // 15: registry.Registry.ListTopics:input_type -> registry.TopicRequest
	6,  // 16: registry.Registry.CreateTopic:input_type -> registry.CreateTopicRequest
	5,  // 17: registry.Registry.DeleteTopic:input_type -> registry.TopicRequest
	12, // 18: registry.Registry.ReassigningTopics:input_type -> registry.Empty
	12, // 19: registry.Registry.UnderReplicatedTopics:input_type -> registry.Empty
	5,  // 20: registry.Registry.TopicMappings:input_type -> registry.TopicRequest
	1,  // 21: registry.Registry.BrokerMappings:input_type -> registry.BrokerRequest
	5,  // 22: registry.Registry.TagTopic:input_type -> registry.TopicRequest
	5,  // 23: registry.Registry.DeleteTopicTags:input_type -> registry.TopicRequest
	1,  // 24: registry.Registry.TagBroker:input_type -> registry.BrokerRequest
	1,  // 25: registry.Registry.DeleteBrokerTags:input_type -> registry.BrokerRequest
	10, // 26: registry.Registry.TranslateOffsets:input_type -> registry.TranslateOffsetRequest
	2,  // 27: registry.Registry.GetBrokers:output_type -> registry.BrokerResponse
	2,  // 28: registry.Registry.ListBrokers:output_type -> registry.BrokerResponse
	2,  // 29: registry.Registry.UnmappedBrokers:output_type -> registry.BrokerResponse
	7,  // 30: registry.Registry.GetTopics:output_type -> registry.TopicResponse
	7,  // 31: registry.Registry.ListTopics:output_type -> registry.TopicResponse
	12, // 32: registry.Registry.CreateTopic:output_type -> registry.Empty
	12, // 33: registry.Registry.DeleteTopic:output_type -> registry.Empty
	7,  // 34: registry.Registry.ReassigningTopics:output_type -> registry.TopicResponse
	7,  // 35: registry.Registry.UnderReplicatedTopics:output_type -> registry.TopicResponse
	2,  // 36: registry.Registry.TopicMappings:output_type -> registry.BrokerResponse
	7,  // 37: registry.Registry.BrokerMappings:output_type -> registry.TopicResponse
	0,  // 38: registry.Registry.TagTopic:output_type -> registry.TagResponse
	0,  // 39: registry.Registry.DeleteTopicTags:output_type -> registry.TagResponse
	0,  // 40: registry.Registry.TagBroker:output_type -> registry.TagResponse
	0,  // 41: registry.Registry.DeleteBrokerTags:output_type -> registry.TagResponse
	11, // 42: registry.Registry.TranslateOffsets:output_type -> registry.TranslateOffsetResponse
	27, // [27:43] is the sub-list for method output_type
	11, // [11:27] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_protos_registry_proto_init() }
func file_protos_registry_proto_init() {
	if File_protos_registry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_registry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BrokerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmappedBrokersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Broker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OffsetMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateOffsetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateOffsetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_registry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_registry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_registry_proto_goTypes,
		DependencyIndexes: file_protos_registry_proto_depIdxs,
		MessageInfos:      file_protos_registry_proto_msgTypes,
	}.Build()
	File_protos_registry_proto = out.File
	file_protos_registry_proto_rawDesc = nil
	file_protos_registry_proto_goTypes = nil
	file_protos_registry_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// UnmappedBrokers returns a BrokerResponse with the ids field
	// populated with broker IDs that do not hold any assigned partitions.
	// Any topic names specified in the UnmappedBrokersRequest exclude field
	// are ignored. For example, broker 1000 holds no partitions other
	// than one belonging to the 'test0' topic. If UnmappedBrokers is called
	// with 'test0' specified as an exclude name, broker 1000 will be returned
	// in the BrokerResponse as an unmapped broker.
	UnmappedBrokers(ctx context.Context, in *UnmappedBrokersRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	//
	//CreateTopic creates a topic.
	//Example:
	//$ curl -XPOST "localhost:8080/v1/topics/create" -d '{
	//"topic": {
	//"name": "mytopic",
	//"partitions": 32,
	//"replication": 2,
	//"tags": {"env":"staging"}
	//},
	//"target_broker_tags": ["pool:tests"]
	//}'
	CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Empty, error)
	//
	//DeleteTopic takes a TopicRequest and deletes the topic specified in the
	//TopicRequest.name field.
	//Example:
	//$ curl -XDELETE "localhost:8080/v1/topics/mytopic"
	DeleteTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*Empty, error)
	// ReassigningTopics returns a TopicResponse with the names field populated
	// with topic names of all topics undergoing a reassignment.
	ReassigningTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error)
	// UnderReplicatedTopics returns a TopicResponse with the names field populated
	// with topic names of all under replicated topics.
	UnderReplicatedTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. Both a single topic name or specified in the
	// TopicRequest.name field.
	TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for the requested broker. The broker is specified in the
	// BrokerRequest.id field.
	BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// TagTopic takes a TopicRequest and sets any specified
	// tags for the named topic. Any existing tags that are
	// not specified in the request are left unmodified.
	TagTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// DeleteTopicTags takes a TopicRequest and deletes any
	// specified tags for the named topic. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteTopicTags(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// TagBroker takes a BrokerRequest and sets any specified
	// tags for the named broker. Any existing tags that are
	// not specified in the request are left unmodified.
	TagBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// DeleteBrokerTags takes a BrokerRequest and deletes any
	// specified tags for the named broker. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteBrokerTags(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error)
	// TranslateOffsets returns a TranslateOffsetResponse with the
	// the upstream/local offsets for the provided consumer group
	// populated per topic/partition.
	// The remote cluster alias and consumer group id are specified
	// in the TranslateOffsetRequest.remote_cluster_alias and
	// TranslateOffsetRequest.group_id respectively.
	TranslateOffsets(ctx context.Context, in *TranslateOffsetRequest, opts ...grpc.CallOption) (*TranslateOffsetResponse, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnmappedBrokers(ctx context.Context, in *UnmappedBrokersRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/UnmappedBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) CreateTopic(ctx context.Context, in *CreateTopicRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/registry.Registry/CreateTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/registry.Registry/DeleteTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ReassigningTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ReassigningTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) UnderReplicatedTopics(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/UnderReplicatedTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TopicMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/BrokerMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TagTopic(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TagTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteTopicTags(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/DeleteTopicTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TagBroker(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TagBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) DeleteBrokerTags(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TagResponse, error) {
	out := new(TagResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/DeleteBrokerTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TranslateOffsets(ctx context.Context, in *TranslateOffsetRequest, opts ...grpc.CallOption) (*TranslateOffsetResponse, error) {
	out := new(TranslateOffsetResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TranslateOffsets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// UnmappedBrokers returns a BrokerResponse with the ids field
	// populated with broker IDs that do not hold any assigned partitions.
	// Any topic names specified in the UnmappedBrokersRequest exclude field
	// are ignored. For example, broker 1000 holds no partitions other
	// than one belonging to the 'test0' topic. If UnmappedBrokers is called
	// with 'test0' specified as an exclude name, broker 1000 will be returned
	// in the BrokerResponse as an unmapped broker.
	UnmappedBrokers(context.Context, *UnmappedBrokersRequest) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	//
	//CreateTopic creates a topic.
	//Example:
	//$ curl -XPOST "localhost:8080/v1/topics/create" -d '{
	//"topic": {
	//"name": "mytopic",
	//"partitions": 32,
	//"replication": 2,
	//"tags": {"env":"staging"}
	//},
	//"target_broker_tags": ["pool:tests"]
	//}'
	CreateTopic(context.Context, *CreateTopicRequest) (*Empty, error)
	//
	//DeleteTopic takes a TopicRequest and deletes the topic specified in the
	//TopicRequest.name field.
	//Example:
	//$ curl -XDELETE "localhost:8080/v1/topics/mytopic"
	DeleteTopic(context.Context, *TopicRequest) (*Empty, error)
	// ReassigningTopics returns a TopicResponse with the names field populated
	// with topic names of all topics undergoing a reassignment.
	ReassigningTopics(context.Context, *Empty) (*TopicResponse, error)
	// UnderReplicatedTopics returns a TopicResponse with the names field populated
	// with topic names of all under replicated topics.
	UnderReplicatedTopics(context.Context, *Empty) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. Both a single topic name or specified in the
	// TopicRequest.name field.
	TopicMappings(context.Context, *TopicRequest) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for the requested broker. The broker is specified in the
	// BrokerRequest.id field.
	BrokerMappings(context.Context, *BrokerRequest) (*TopicResponse, error)
	// TagTopic takes a TopicRequest and sets any specified
	// tags for the named topic. Any existing tags that are
	// not specified in the request are left unmodified.
	TagTopic(context.Context, *TopicRequest) (*TagResponse, error)
	// DeleteTopicTags takes a TopicRequest and deletes any
	// specified tags for the named topic. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteTopicTags(context.Context, *TopicRequest) (*TagResponse, error)
	// TagBroker takes a BrokerRequest and sets any specified
	// tags for the named broker. Any existing tags that are
	// not specified in the request are left unmodified.
	TagBroker(context.Context, *BrokerRequest) (*TagResponse, error)
	// DeleteBrokerTags takes a BrokerRequest and deletes any
	// specified tags for the named broker. Tags must be provided
	// as key names only; "key:value" will not target the tag "key".
	DeleteBrokerTags(context.Context, *BrokerRequest) (*TagResponse, error)
	// TranslateOffsets returns a TranslateOffsetResponse with the
	// the upstream/local offsets for the provided consumer group
	// populated per topic/partition.
	// The remote cluster alias and consumer group id are specified
	// in the TranslateOffsetRequest.remote_cluster_alias and
	// TranslateOffsetRequest.group_id respectively.
	TranslateOffsets(context.Context, *TranslateOffsetRequest) (*TranslateOffsetResponse, error)
}

// UnimplementedRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (*UnimplementedRegistryServer) GetBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokers not implemented")
}
func (*UnimplementedRegistryServer) ListBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBrokers not implemented")
}
func (*UnimplementedRegistryServer) UnmappedBrokers(context.Context, *UnmappedBrokersRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnmappedBrokers not implemented")
}
func (*UnimplementedRegistryServer) GetTopics(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopics not implemented")
}
func (*UnimplementedRegistryServer) ListTopics(context.Context, *TopicRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (*UnimplementedRegistryServer) CreateTopic(context.Context, *CreateTopicRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopic not implemented")
}
func (*UnimplementedRegistryServer) DeleteTopic(context.Context, *TopicRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopic not implemented")
}
func (*UnimplementedRegistryServer) ReassigningTopics(context.Context, *Empty) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReassigningTopics not implemented")
}
func (*UnimplementedRegistryServer) UnderReplicatedTopics(context.Context, *Empty) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnderReplicatedTopics not implemented")
}
func (*UnimplementedRegistryServer) TopicMappings(context.Context, *TopicRequest) (*BrokerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopicMappings not implemented")
}
func (*UnimplementedRegistryServer) BrokerMappings(context.Context, *BrokerRequest) (*TopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BrokerMappings not implemented")
}
func (*UnimplementedRegistryServer) TagTopic(context.Context, *TopicRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagTopic not implemented")
}
func (*UnimplementedRegistryServer) DeleteTopicTags(context.Context, *TopicRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopicTags not implemented")
}
func (*UnimplementedRegistryServer) TagBroker(context.Context, *BrokerRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagBroker not implemented")
}
func (*UnimplementedRegistryServer) DeleteBrokerTags(context.Context, *BrokerRequest) (*TagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBrokerTags not implemented")
}
func (*UnimplementedRegistryServer) TranslateOffsets(context.Context, *TranslateOffsetRequest) (*TranslateOffsetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateOffsets not implemented")
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnmappedBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmappedBrokersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnmappedBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/UnmappedBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnmappedBrokers(ctx, req.(*UnmappedBrokersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_CreateTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).CreateTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/CreateTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).CreateTopic(ctx, req.(*CreateTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/DeleteTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ReassigningTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ReassigningTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ReassigningTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ReassigningTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_UnderReplicatedTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).UnderReplicatedTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/UnderReplicatedTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).UnderReplicatedTopics(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TopicMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TopicMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TopicMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TopicMappings(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_BrokerMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).BrokerMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/BrokerMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).BrokerMappings(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TagTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TagTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TagTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TagTopic(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteTopicTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteTopicTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/DeleteTopicTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteTopicTags(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TagBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TagBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TagBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TagBroker(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_DeleteBrokerTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).DeleteBrokerTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/DeleteBrokerTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).DeleteBrokerTags(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TranslateOffsets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateOffsetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TranslateOffsets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TranslateOffsets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TranslateOffsets(ctx, req.(*TranslateOffsetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrokers",
			Handler:    _Registry_GetBrokers_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _Registry_ListBrokers_Handler,
		},
		{
			MethodName: "UnmappedBrokers",
			Handler:    _Registry_UnmappedBrokers_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _Registry_GetTopics_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Registry_ListTopics_Handler,
		},
		{
			MethodName: "CreateTopic",
			Handler:    _Registry_CreateTopic_Handler,
		},
		{
			MethodName: "DeleteTopic",
			Handler:    _Registry_DeleteTopic_Handler,
		},
		{
			MethodName: "ReassigningTopics",
			Handler:    _Registry_ReassigningTopics_Handler,
		},
		{
			MethodName: "UnderReplicatedTopics",
			Handler:    _Registry_UnderReplicatedTopics_Handler,
		},
		{
			MethodName: "TopicMappings",
			Handler:    _Registry_TopicMappings_Handler,
		},
		{
			MethodName: "BrokerMappings",
			Handler:    _Registry_BrokerMappings_Handler,
		},
		{
			MethodName: "TagTopic",
			Handler:    _Registry_TagTopic_Handler,
		},
		{
			MethodName: "DeleteTopicTags",
			Handler:    _Registry_DeleteTopicTags_Handler,
		},
		{
			MethodName: "TagBroker",
			Handler:    _Registry_TagBroker_Handler,
		},
		{
			MethodName: "DeleteBrokerTags",
			Handler:    _Registry_DeleteBrokerTags_Handler,
		},
		{
			MethodName: "TranslateOffsets",
			Handler:    _Registry_TranslateOffsets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/registry.proto",
}
