// Requires the googleapis repo. From the kafka-kit root:
// protoc -I registry -I /path/to/googleapis protos/registry.proto --go_out=plugins=grpc:registry --grpc-gateway_out=logtostderr=true:registry
syntax = "proto3";

import "google/api/annotations.proto";

package registry;

service Registry {
  // GetBrokers returns a BrokerResponse with the brokers field populated
  // with full broker metadata. If the input BrokerRequest.id field is
  // non-nil, a single broker is returned matching the ID specified in the
  // Broker object. Otherwise all brokers are returned, optionally filtered
  // by any provided BrokerRequest.tags parameters.
  rpc GetBrokers (BrokerRequest) returns (BrokerResponse) {
    option (google.api.http) = {
      get: "/v1/brokers"
    };
  }

  // ListBrokers returns a BrokerResponse with the ids field populated
  // with broker IDs. If the input BrokerRequest.id field is non-nil,
  // a single broker ID is returned matching the ID specified in the
  // Broker object if the broker exists. Otherwise all brokers are returned,
  // optionally filtered by any provided BrokerRequest.tags parameters.
  rpc ListBrokers (BrokerRequest) returns (BrokerResponse) {
    option (google.api.http) = {
      get: "/v1/brokers/list"
    };
  }

  // GetTopics returns a TopicResponse with the topics field populated
  // with full topic metadata. If the input TopicRequest.name field is
  // non-nil, a single topic is returned matching the name specified in the
  // Topic object. Otherwise all topics are returned, optionally filtered
  // by any provided TopicRequest.tags parameters.
  rpc GetTopics (TopicRequest) returns (TopicResponse) {
    option (google.api.http) = {
      get: "/v1/topics"
    };
  }

  // ListTopics returns a TopicResponse with the names field populated
  // with topic names. If the input TopicRequest.name field is non-nil,
  // a single topic name is returned matching the name specified in the
  // Topic object if the topic exists. Otherwise all topics are returned,
  // optionally filtered by any provided TopicRequest.tags parameters.
  rpc ListTopics (TopicRequest) returns (TopicResponse) {
    option (google.api.http) = {
      get: "/v1/topics/list"
    };
  }

  /*
  CreateTopic creates a topic.
  Example:
     $ curl -XPOST "localhost:8080/v1/topics/create" -d '{
       "topic": {
         "name": "mytopic",
         "partitions": 32,
         "replication": 2,
         "tags": {"env":"staging"}
       },
       "target_broker_tags": ["pool:tests"]
     }'
  */
  rpc CreateTopic (CreateTopicRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/topics/create"
      body: "*"
    };
  }

  // DeleteTopic deletes a topic
  rpc DeleteTopic (DeleteTopicRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/v1/topics/delete/{topic}"
    };
  }

  // TopicMappings returns a BrokerResponse with the ids field
  // populated with broker IDs that hold at least one partition
  // for the requested topic. The topic is specified in the
  // TopicRequest.name field.
  rpc TopicMappings (TopicRequest) returns (BrokerResponse) {
    option (google.api.http) = {
      get: "/v1/mappings/topic/{name}"
    };
  }

  // BrokerMappings returns a TopicResponse with the names field
  // populated with topics that the broker holds at least one partition
  // for the requested broker. The broker is specified in the
  // BrokerRequest.id field.
  rpc BrokerMappings (BrokerRequest) returns (TopicResponse) {
    option (google.api.http) = {
      get: "/v1/mappings/broker/{id}"
    };
  }

  // TagTopic takes a TopicRequest and sets any specified
  // tags for the named topic. Any existing tags that are
  // not specified in the request are left unmodified.
  rpc TagTopic (TopicRequest) returns (TagResponse) {
    option (google.api.http) = {
      put: "/v1/topics/tag/{name}"
    };
  }

  // DeleteTopicTags takes a TopicRequest and deletes any
  // specified tags for the named topic. Tags must be provided
  // as key names only; "key:value" will not target the tag "key".
  rpc DeleteTopicTags (TopicRequest) returns (TagResponse) {
    option (google.api.http) = {
      delete: "/v1/topics/tag/{name}"
    };
  }

  // TagBroker takes a BrokerRequest and sets any specified
  // tags for the named broker. Any existing tags that are
  // not specified in the request are left unmodified.
  rpc TagBroker (BrokerRequest) returns (TagResponse) {
    option (google.api.http) = {
      put: "/v1/brokers/tag/{id}"
    };
  }

  // DeleteBrokerTags takes a BrokerRequest and deletes any
  // specified tags for the named broker. Tags must be provided
  // as key names only; "key:value" will not target the tag "key".
  rpc DeleteBrokerTags (BrokerRequest) returns (TagResponse) {
    option (google.api.http) = {
      delete: "/v1/brokers/tag/{id}"
    };
  }
}

message TagResponse {
  string message = 1;
}

/**********
* Brokers *
**********/

message BrokerRequest {
  repeated string tag = 1;
  uint32 id = 2;
}

message BrokerResponse {
  map<uint32, Broker> brokers = 5;
  repeated uint32 ids = 6;
}

message Broker {
  // Registry metadata.
  map<string, string> tags = 1;
  // Broker metadata from ZooKeeper.
  uint32 id = 5;
  map<string, string> listenersecurityprotocolmap = 6;
  repeated string endpoints = 7;
  string rack = 8;
  uint32 jmxport = 9;
  string host = 10;
  int64 timestamp = 11;
  uint32 port = 12;
  uint32 version = 13;
}

/*********
* Topics *
*********/

message TopicRequest {
  repeated string tag = 1;
  string name = 2;
}

message CreateTopicRequest {
  Topic topic = 1;
  repeated string target_broker_tags = 2;
}

message DeleteTopicRequest {
  string topic = 1;
  // repeated string target_broker_tags = 2;
}

message TopicResponse {
  map<string, Topic> topics = 5;
  repeated string names = 6;
}

message Topic {
  // Registry metadata.
  map<string, string> tags = 1;
  // Topic metadata from ZooKeeper.
  string name = 5;
  uint32 partitions = 6;
  uint32 replication = 7;
  map<string, string> configs = 8;
}

/*******
* Misc *
*******/

message Empty {}
